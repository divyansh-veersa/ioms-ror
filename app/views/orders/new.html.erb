<div class="space-y-6">
  <div class="flex justify-between items-center">
    <h1 class="text-3xl font-bold">New Order</h1>
    <%= link_to "Back to Orders", orders_path, class: "bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded" %>
  </div>

  <div class="bg-white p-6 rounded-lg shadow">
    <%= form_with(model: @order, class: "space-y-6", data: { controller: "order-form" }) do |form| %>
      <% if @order.errors.any? %>
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <h2><%= pluralize(@order.errors.count, "error") %> prohibited this order from being saved:</h2>
          <ul class="list-disc list-inside">
            <% @order.errors.each do |error| %>
              <li><%= error.full_message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <div class="mb-6">
        <%= form.label :customer_id, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.collection_select :customer_id, 
                                  @customers, 
                                  :id, 
                                  :name, 
                                  { selected: params[:customer_id], prompt: "Select a customer" }, 
                                  { class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" } %>
      </div>

      <div class="border-t border-b border-gray-200 py-6">
        <h2 class="text-lg font-semibold mb-4">Order Items</h2>
        
        <div id="order-items" class="space-y-4">
          <!-- Initial item row -->
          <div class="order-item-row grid grid-cols-12 gap-3 items-end">
            <div class="col-span-6">
              <label class="block text-sm font-medium text-gray-700 mb-1">Product</label>
              <select name="order_items[][product_id]" class="product-select block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Select a product</option>
                <% @products.each do |product| %>
                  <option value="<%= product.id %>" data-price="<%= product.price %>" data-stock="<%= product.stock_quantity %>">
                    <%= product.name %> (<%= number_to_currency(product.price) %>) - <%= product.stock_quantity %> in stock
                  </option>
                <% end %>
              </select>
            </div>
            
            <div class="col-span-3">
              <label class="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
              <input type="number" name="order_items[][quantity]" min="1" value="1" class="quantity-input block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            </div>
            
            <div class="col-span-2">
              <label class="block text-sm font-medium text-gray-700 mb-1">Subtotal</label>
              <div class="item-subtotal text-gray-700 font-medium">$0.00</div>
            </div>
            
            <div class="col-span-1">
              <button type="button" class="remove-item-btn text-red-600 hover:text-red-900 ml-2 invisible">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </div>
        </div>
        
        <div class="mt-4">
          <button type="button" id="add-item-btn" class="text-blue-600 hover:text-blue-900 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Add Another Item
          </button>
        </div>
      </div>
      
      <div class="flex justify-between items-center border-t border-gray-200 pt-4">
        <span class="text-lg font-semibold">Total: <span id="order-total">$0.00</span></span>
        <%= form.submit "Create Order", class: "bg-blue-600 border border-transparent rounded-md shadow-sm py-2 px-4 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
      </div>
    <% end %>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Add item button functionality
  document.getElementById('add-item-btn').addEventListener('click', function() {
    const itemsContainer = document.getElementById('order-items');
    const newRow = itemsContainer.querySelector('.order-item-row').cloneNode(true);
    
    // Reset values
    newRow.querySelector('.product-select').selectedIndex = 0;
    newRow.querySelector('.quantity-input').value = 1;
    newRow.querySelector('.item-subtotal').textContent = '$0.00';
    
    // Show the remove button
    newRow.querySelector('.remove-item-btn').classList.remove('invisible');
    
    // Add event listeners
    addRowEventListeners(newRow);
    
    itemsContainer.appendChild(newRow);
  });
  
  // Add event listeners to the initial row
  const initialRow = document.querySelector('.order-item-row');
  addRowEventListeners(initialRow);
  
  // Function to add event listeners to a row
  function addRowEventListeners(row) {
    const productSelect = row.querySelector('.product-select');
    const quantityInput = row.querySelector('.quantity-input');
    const subtotalElement = row.querySelector('.item-subtotal');
    const removeButton = row.querySelector('.remove-item-btn');
    
    // Update subtotal when product or quantity changes
    function updateSubtotal() {
      const selectedOption = productSelect.selectedOptions[0];
      if (selectedOption && selectedOption.value) {
        const price = parseFloat(selectedOption.dataset.price);
        const quantity = parseInt(quantityInput.value);
        const subtotal = price * quantity;
        subtotalElement.textContent = '$' + subtotal.toFixed(2);
      } else {
        subtotalElement.textContent = '$0.00';
      }
      updateOrderTotal();
    }
    
    productSelect.addEventListener('change', function() {
      if (this.value) {
        const stock = parseInt(this.selectedOptions[0].dataset.stock);
        quantityInput.max = stock;
        if (parseInt(quantityInput.value) > stock) {
          quantityInput.value = stock;
        }
      }
      updateSubtotal();
    });
    
    quantityInput.addEventListener('change', updateSubtotal);
    
    // Remove button functionality
    removeButton.addEventListener('click', function() {
      if (document.querySelectorAll('.order-item-row').length > 1) {
        row.remove();
        updateOrderTotal();
      }
    });
  }
  
  // Update order total
  function updateOrderTotal() {
    let total = 0;
    document.querySelectorAll('.item-subtotal').forEach(function(element) {
      const subtotal = parseFloat(element.textContent.replace('$', ''));
      if (!isNaN(subtotal)) {
        total += subtotal;
      }
    });
    document.getElementById('order-total').textContent = '$' + total.toFixed(2);
  }
});
</script>
